Syscalls follow the System V AMD64 ABI calling convention/
A function that returns 0/-1 on success/failure will be refered as "s/f".

NAME          RAX     RDI                RSI                   RDX               DESCRIPTION
DRAW          1       uint8_t xcord      uint8_t ycord         uint8 rgb         Draws a pixel at (x,y) with rgb color (in hex), returns -2/-1 on invalid color/coordinate, 0 if ok
GETRES        2       ScreenRes * res                                            Load screen resolution into res, returns void.
MEMDUMP       3       void * src         void * dest                             Loads 32 bytes of memory from src to dest, returns s/f.
GETTIME       4       Time * time                                                Loads system time into time, returns void.
CPUINFO       5       CpuInfo * name                                             Loads processor brand name, and description, with a max length of 50 and 70 bytes each.
CPUTEMP       6                                                                  Returns the temperature of the CPU in Celsius.
GETREGBKP     7       RegBkp *RegBkp                                             Loads the status of the registers from the last time TAB was pressed or an exception was produced.
MALLOC        8       int size                                                   Allocates a segment of size bytes and returns a pointer to the beggining of it, or NULL on error.
FREE          9       void *ptr                                                  Frees a previously allocated segment starting at ptr.
MEMSTATUS     10      int *memSize       int *freeSpace        int *occSpace     Provides information about the usage of memory.
STARTPROCESS  11      void *main         int argc              char **argv       Creates a process starting at main, with specified parameters, and returns its PID.
PS            12      void * buffer      int * cantProc                          Provides *cantProc proccesses data, using PCB
																					struct.
																										

STRUCTURES:

ScreenRes { int height, int width}
Time { int hours, int minutes, int seconds }
CpuInfo { char * brandName, char * brandDesc }
RegBkp { uint64_t rax, rbx, rcx, rdx, rsi, rdi, rbp, r8, r9, r10, r11, r12, r13, r14, r15 }

PCB {
    int pid;
    ProcState procState;
    void * contextRSP;
    unsigned char remainingTicks;
    struct PCB * nextPCB;
}